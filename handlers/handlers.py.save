# telegram_bot/handlers/handlers.py

import openai
import logging
import asyncio
import json
import os
import requests
from pathlib import Path
from telegram import Update, InputFile
from telegram.ext import ContextTypes
from .tts import text_to_speech  # Импортируем функцию из tts.py

# Установите ваш API-ключ OpenAI
openai.api_key = "sk-proj-sdYTeYNI6Wcz9jPc3JunT3BlbkFJL6LKvOEYM6eK5xx8csPk"

# Настройка логирования
logger = logging.getLogger(__name__)

# Функции для сохранения и загрузки истории общения
def save_user_history(user_id, history):
    with open(f"/root/telegram-bot/telegram_bot/logs/user_{user_id}_history.json", "w") as file:
        json.dump(history, file)

def load_user_history(user_id):
    try:
        with open(f"/root/telegram-bot/telegram_bot/logs/user_{user_id}_history.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

async def ask_openai_stream(user_question, update, context):
    try:
        user_id = update.message.from_user.id
        user_history = context.user_data.get("conversation_history", [])

        message = await update.message.reply_text("Генерация ответа...")
        response_text = ""
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=user_history + [
                {"role": "user", "content": user_question}
            ],
            stream=True
        )
        chunk_text = ""
        async for chunk in response:
            if context.user_data.get('stop', False):
                return
            delta = chunk.choices[0].delta.get('content', '')
            if delta:
                chunk_text += delta
                if len(chunk_text) >= 100:  # Обновление каждые 100 символов
                    response_text += chunk_text
                    try:
                        if response_text != message.text:
                            await message.edit_text(response_text)
                        await asyncio.sleep(0.1)  # Минимальная задержка между запросами для предотвращения Flood control
                        chunk_text = ""
                    except Exception as e:
                        logger.error(f"Ошибка при редактировании сообщения: {e}")
                        if "Flood control exceeded" in str(e):
                            retry_after = int(str(e).split("Retry in ")[1].split(" ")[0])
                            await asyncio.sleep(retry_after)
                        elif "Timed out" in str(e):
                            await asyncio.sleep(5)
                        else:
                            break
        response_text += chunk_text
        if response_text != message.text:
            await message.edit_text(response_text)
        # Сохраняем историю сообщений
        context.user_data.setdefault("conversation_history", []).append(
            {"role": "assistant", "content": response_text}
        )
        save_user_history(user_id, context.user_data["conversation_history"])
    except asyncio.CancelledError:
        return
    except Exception as e:
        logger.error(f"Ошибка при обработке запроса: {e}")
        await update.message.reply_text("Произошла ошибка при обработке вашего запроса. Попробуйте позже.")

async def generate_dalle_image(prompt):
    try:
        response = openai.Image.create(
            prompt=prompt,
            n=1,
            size="1024x1024"
        )
        image_url = response['data'][0]['url']
        image_data = requests.get(image_url).content
        return image_data
    except Exception as e:
        logger.error(f"Ошибка при генерации изображения: {e}")
        return None

# Обработчик для команды /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['active'] = True
    context.user_data['stop'] = False
    await update.message.reply_text("Привет! Какой у тебя вопрос?")

# Обработчик для команды /stop
async def stop_generation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['stop'] = True
    if 'task' in context.user_data and context.user_data['task']:
        context.user_data['task'].cancel()
        context.user_data['task'] = None
    await update.message.reply_text("Генерация текущего ответа остановлена.")

# Обработчик для команды /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "/start - Начать работу с ботом\n"
        "/stop - Остановить генерацию ответа\n"
        "/help - Получить список команд"
    )

# Обработчик для текстовых сообщений
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_question = update.message.text.lower()

    # Загружаем историю пользователя
    context.user_data["conversation_history"] = load_user_history(user_id)
    context.user_data["conversation_history"].insert(0, {"role": "system", "content": "Business Assistant helps users solve various business problems by providing intelligent and effective solutions. With intelligent humor, he makes interactions pleasant and easy. Also uses a random number of emoticons in the text, but no more than 5 per message. The assistant analyzes information, provides recommendations and helps in planning and organizing business processes. Its goal is to make it easier for users to complete tasks и make informed decisions."})

    if user_question == "стоп":
        await stop_generation(update, context)
    elif any(phrase in user_question for phrase in ["сгенерируй изображение", "создай фото", "создай изображение"]):
        prompt = user_question.split(maxsplit=1)[1] if len(user_question.split(maxsplit=1)) > 1 else ""
        await update.message.reply_text("Генерация изображения, пожалуйста подождите...")
        image_data = await generate_dalle_image(prompt)
        if image_data:
            await update.message.reply_photo(photo=InputFile(image_data, filename="image.png"))
        else:
            await update.message.reply_text("Произошла ошибка при генерации изображения.")
    elif "отправь мою фотографию" in user_question:
        photo_path = context.user_data.get("photo_path")
        if photo_path and os.path.exists(photo_path):
            await update.message.reply_photo(photo=InputFile(photo_path))
        else:
            await update.message.reply_text("У меня нет сохраненных фотографий для отправки.")
    elif user_question.startswith("сделай голосовое сообщение"):
        text = user_question.replace("сделай голосовое сообщение", "").strip()
        if text:
            speech_file_path = Path(__file__).parent / f"{user_id}_speech.mp3"
            await update.message.reply_text("Преобразование текста в голос, пожалуйста подождите...")
            speech_file = await asyncio.to_thread(text_to_speech, text, speech_file_path)
            if speech_file:
                await update.message.reply_audio(audio=open(speech_file, "rb"))
            else:
                await update.message.reply_text("Произошла ошибка при преобразовании текста в голос.")
        else:
            await update.message.reply_text("Пожалуйста, предоставьте текст для преобразования в голос.")
    else:
        if context.user_data.get('active', True):
            if 'task' in context.user_data and context.user_data['task']:
                context.user_data['task'].cancel()
            context.user_data['task'] = asyncio.create_task(ask_openai_stream(user_question, update, context))
            # Сохраняем вопрос пользователя в истории
            context.user_data.setdefault("conversation_history", []).append(
                {"role": "user", "content": user_question}
            )
            save_user_history(user_id, context.user_data["conversation_history"])
        else:
            await update.message.reply_text("Бот остановлен. Используйте команду /start для перезапуска.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    photo_file = await update.message.photo[-1].get_file()
    photo_path = f"user_{user_id}_photo.jpg"
    await photo_file.download(photo_path)

    context.user_data["photo_path"] = photo_path
    save_user_history(user_id, context.user_data["conversation_history"])
    await update.message.reply_text(f"Фото сохранено как {photo_path}")
    logger.info(f"Фото пользователя {user_id} сохранено как {photo_path}")
